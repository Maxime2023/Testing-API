{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Option","Select","App","state","url","config","apiSelected","apiValidated","isChecked","isHeader","value","testImage","isLogedIn","login","password","handleChange","setState","handleCheck","handleHeader","handleChangeLogin","event","target","handleChangePassword","handleConnect","openNotification","str","msg","colorSent","notification","open","style","color","message","description","modifyUrl","e","clearStorage","localStorage","clear","sessionStorage","callApi","xhr","XMLHttpRequest","setRequestHeader","getItem","onload","readyState","status","this","responseText","console","error","statusText","log","bind","onerror","send","identify","authenticationDetails","AmazonCognitoIdentity","Username","Password","userData","Pool","UserPoolId","ClientId","authenticateUser","onSuccess","result","idToken","jwtToken","slice","setItem","loadScript","auth","headers","width","marginLeft","marginTop","textAlign","onClick","onChange","className","defaultValue","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1e7c13f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport * as AmazonCognitoIdentity from 'amazon-cognito-identity-js';\nimport { Button, notification, Select, Checkbox, Input } from 'antd';\n\nconst { Option } = Select;\n\nclass App extends Component {\n  state = {\n    url: '',\n    config: {},\n    apiSelected: 0,\n    apiValidated: 0,\n    isChecked: false,\n    isHeader: true,\n    value: \"\",\n    testImage: \"\",\n    isLogedIn: false,\n    login: \"\",\n    password: \"\"\n  }\n\n  componentDidMount() {\n    const auth = {\n      headers: {\n        \"Authorization\" : localStorage.getItem(\"Token\"),\n      }\n    };\n    this.setState({config: auth});\n  }\n\n  handleChange = (value) => {\n    this.setState({apiSelected: value});\n  }\n\n  handleCheck = () => {\n    this.setState({isChecked: !this.state.isChecked})\n  }\n  handleHeader = () => {\n    this.setState({isHeader: !this.state.isHeader})\n  }\n\n  handleChangeLogin = (event) => {\n    this.setState({login: event.target.value});\n  }\n  handleChangePassword = (event) => {\n    this.setState({password: event.target.value});\n  }\n  handleConnect = () => {\n    if (this.state.login === \"maxime.dizier.luxcarta@gmail.com\" && this.state.password === \"Password1!\")\n      this.setState({isLogedIn: true})\n  }\n\n  openNotification = (str, msg, colorSent) => {\n    notification.open({\n      style: {color: colorSent},\n      message: msg,\n      description: str,\n\n    });\n  }\n\n  modifyUrl = (e) => {\n    this.setState({value: e.target.value});\n    this.setState({url: e.target.value});\n  }\n\n  clearStorage = () => {\n    localStorage.clear();\n    sessionStorage.clear();\n  }\n\n  ///////////////////////mettre un login page///////////////////////\n\n  callApi = () => {\n    const url = [\n      \"https://jsonplaceholder.typicode.com/todos/1\",\n      \"https://2fthddyg5m.execute-api.eu-central-1.amazonaws.com/Prod/get/get?map=cp%2F3876_australia_vodafone_062018.map&srs=EPSG%3A3857&transparent=true&format=image%2Fpng&exceptions=application%2Fvnd.ogc.se_xml&styles=&tiled=true&feature_count=101&service=WMS&version=1.1.1&request=GetMap&layers=ORTHO&bbox=15429272.781532537%2C-4138606.4594725817%2C15439056.72115304%2C-4128822.5198520795&width=256&height=256\",\n      \"https://3kzsy3ah3h.execute-api.eu-central-1.amazonaws.com/Prod/tms/mosaic/ndvimask/1/0/1/1/1/1.png\",\n      \"https://vr77y6sw57.execute-api.eu-central-1.amazonaws.com/TestCognitoToken/transactions?transactionId=5&type=PURCHASE&amount=3\"\n    ]\n    // axios.get(url[this.state.apiSelected], this.state.config).then((response) => {\n    //   var test = btoa(unescape(encodeURIComponent(response.data)));\n    //   this.setState({testImage: \"data:image/png;base64,\" + btoa(unescape(encodeURIComponent(test)))})\n    //   console.log(\"test\", this.state.testImage)\n    // }).catch((error) => {\n    //   console.log(error)\n    // })\n\n\n    var xhr = new XMLHttpRequest();\n    if (this.state.isChecked) {\n      xhr.open(\"GET\", this.state.value, true);\n    }\n    else {\n      xhr.open(\"GET\", url[this.state.apiSelected], true);\n    }\n    if (this.state.isHeader)\n      xhr.setRequestHeader(\"Authorization\", localStorage.getItem(\"Token\"));\n    xhr.onload = function (e) {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          this.setState({apiValidated: this.state.apiSelected})\n          this.setState({url: xhr.responseText});\n          this.openNotification(\"L'API a été correctement appelée\", \"\", \"green\");\n        } else {\n          console.error(xhr.statusText);\n          console.log(\"ezrzer :\", xhr)\n          this.openNotification(`erreur status : ${xhr.status}`, \"Une erreur s'est produite lors de l'appel\", \"red\");\n        }\n      }\n    }.bind(this);\n    xhr.onerror = function (e) {\n      console.error(xhr.statusText);\n      this.openNotification( `erreur status : ${xhr.status}`, \"Une erreur s'est produite lors de l'appel\", \"red\")\n    }.bind(this);\n    xhr.send(null);\n  }\n  \n  identify = () => {\n    const authenticationData = {\n      Username : \"maxime.dizier.luxcarta@gmail.com\",\n      Password : \"Password1!\",\n    };\n    const poolData = {\n      UserPoolId : \"eu-central-1_cosPuLBeK\",\n      ClientId : \"6cl7iogefk5mjfk5qfsgo2ogmq\"\n    };\n    const authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(authenticationData);\n    const userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n    const userData = {\n      Username : \"maxime.dizier.luxcarta@gmail.com\",\n      Pool : userPool,\n    };\n    const cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n    cognitoUser.authenticateUser(authenticationDetails, {\n      onSuccess: function (result) {\n        this.openNotification(result.idToken.jwtToken.slice(0, 20) + \"...\", 'Le Token a été correctement généré :')\n        console.log(\"token generated :\", result.idToken.jwtToken)\n        localStorage.setItem('Token', result.idToken.jwtToken);\n        this.loadScript();\n      }.bind(this),\n    });\n  }\n\n  render() {\n    const style = {width: \"60%\", marginLeft: \"20%\", marginTop: \"2%\", textAlign: \"center\"}\n    if (this.state.isLogedIn) {\n      return (\n      <>\n        <div>\n          <Button onClick={this.identify} style={style}>OBTENIR UN TOKEN</Button>\n        </div>\n        <div style={style}>\n          Ne pas ajouter le Header <Checkbox onChange={this.handleHeader}></Checkbox>\n        </div>\n        <div style={style}>\n          <Button onClick={this.clearStorage}>Effacer le storage</Button>\n        </div>\n        <div className=\"api\">\n          <div className=\"select-api\">\n            <Select  defaultValue=\"Choisir L'API\" onChange={this.handleChange}>\n              <Option value=\"0\">API PUBLIQUE</Option>\n              <Option value=\"1\">1ere API AWS</Option>\n              <Option value=\"2\">2eme API AWS</Option>\n              <Option value=\"3\">API PERSO AWS</Option>\n            </Select>\n          </div>\n          <div className=\"call-api\">\n            <Button onClick={this.callApi}>APPELER L'API</Button>\n          </div>\n        </div>\n        <div className=\"response\">\n          { this.state.apiValidated > 0 && this.state.url ? <div><img src={this.state.url} alt=\"#\"/></div> : <div>{this.state.url}</div>}\n          <div>{this.state.url.slice(0, 4)}</div>\n        </div>\n      </>\n      )\n    }\n    else {\n      return (\n        <div>\n          <div style={style}>\n            <Input onChange={this.handleChangeLogin}></Input>\n          </div>\n          <div style={style}>\n            <Input.Password onChange={this.handleChangePassword}></Input.Password>\n          </div>\n          <div style={style}>\n            <Button onClick={this.handleConnect}>Se connecter</Button>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}